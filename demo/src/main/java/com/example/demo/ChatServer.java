package com.example.demo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Base64;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;

import java.io.ObjectOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
 
public class ChatServer implements Runnable {
	private static Socket clientSocket;

	static PrintWriter out = null;
	ObjectOutputStream outO = null;
	OutputStream os = null;
	ObjectInputStream inO = null;
	InputStream is = null;

	static KeyPair keypair_RSA = null; // RSA key of Server
	static PrivateKey priv_RSA = null;
	static PublicKey pub_RSA = null;
	static String encoded_pub_RSAKey = null;
	static String encoded_priv_RSAKey = null;
	byte[] encrypted_AESkey = null;

	SecretKey sKey = null;
	static String iv = null;
	static byte[] encrypted_iv = null;
	static byte[] decrypted_iv = null;

	volatile boolean start = true;
	volatile boolean exit = false;

	static HashMap<String, Socket> userList = new HashMap<>();

	public ChatServer(Socket clientSocket) { 
		this.clientSocket = clientSocket;
	}
	
    
    public static void start(){
        ExecutorService eService = Executors.newFixedThreadPool(10);
		// create limitation thread
 
		System.out.println("#Start the server");

		// generate the key!
		if (keypair_RSA == null) {
			keypair_RSA = generate_RSA_key();
			pub_RSA = keypair_RSA.getPublic();
			priv_RSA = keypair_RSA.getPrivate();
			encoded_pub_RSAKey = Base64.getEncoder().encodeToString(pub_RSA.getEncoded());
			encoded_priv_RSAKey = Base64.getEncoder().encodeToString(pub_RSA.getEncoded());
		}
 
		try (ServerSocket sSocket = new ServerSocket(9000)) {
			
			while (true) {
				System.out.println("#connecting ....");
				clientSocket = sSocket.accept();
				ChatServer tes = new ChatServer(clientSocket);
				eService.submit(tes);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("#close the server");
		eService.shutdown();
    }
 
	public void run() {
		
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
			
			// OutputStream : send message [server -> client]
			OutputStream out = clientSocket.getOutputStream();
			
			//user name
			String inputLine = br.readLine();; 
			String UserID = inputLine.split(" ")[0];
			String FriendID = inputLine.split(" ")[1];
			
			
            userList.put(UserID, clientSocket);
			System.out.println("#Client" + "(" + Thread.currentThread() + ")" +UserID+ " connected!");
			
			// send Server's public key to client
			if (start == true) {
				os = clientSocket.getOutputStream();
				outO = new ObjectOutputStream(os);
				outO.writeObject(keypair_RSA.getPublic());
				outO.flush();

				// Print RSA KeyPair
				//System.out.println("[RSA KeyPair info generated by Server]");
				//System.out.println(encoded_pub_RSAKey);
				//System.out.println(encoded_priv_RSAKey + "\n");

				start = false;
			}
			//get AES Key
			while(true) {
					
				if(encrypted_AESkey == null) {
					
					//receive encrypted AES key from client 
					is = clientSocket.getInputStream();
					inO = new ObjectInputStream(is);
					encrypted_AESkey = (byte[])inO.readObject();
					String encryted_AESkey_string = 
							new String(Base64.getEncoder().encode(encrypted_AESkey));
					//System.out.println("[encrypted AES key]");
					//System.out.println(encryted_AESkey_string + "\n");
					
					//receive iv from client
					is = clientSocket.getInputStream();
					inO = new ObjectInputStream(is);
					encrypted_iv = (byte[])inO.readObject();
					String encryted_IV_string = 
							new String(Base64.getEncoder().encode(encrypted_iv));
					//System.out.println("[encrypted IV]");
					//System.out.println(encryted_IV_string + "\n");
					
				} else {
					
					//decrypt secretkey & iv
					sKey = new SecretKeySpec(Decrypt_RSA(encrypted_AESkey, priv_RSA), "AES");
					String encodedsKey = Base64.getEncoder().encodeToString(sKey.getEncoded());
					decrypted_iv = Decrypt_RSA(encrypted_iv, priv_RSA);
					iv = new String(decrypted_iv, "UTF-8");
					
					//print AES secretKey & iv received from client
					/*
					System.out.println("[IV info From Client]");
					System.out.println(iv + "\n");
					System.out.println("[AES SecretKey info From Client]");
					System.out.println(encodedsKey + "\n");	 */				
					break;
				}
			}
 
			while ((inputLine = br.readLine()) != null) {
				// hashmap friendID:socket
				//out = userList.get(FriendID).getOutputStream();
				String decrypted_out = Decrypt_AES(inputLine, sKey);
					
				System.out.println("[From Server] " + decrypted_out);
				System.out.println("[Encrypted Message] " + "\"" + inputLine + "\"");
					
			}
			out.close();
			System.out.println("#client : " + Thread.currentThread() + " close!");
		} catch (IOException | ClassNotFoundException ex) {
			ex.printStackTrace();
		}
 
	}

	public static KeyPair generate_RSA_key() {

		//System.out.println("##Creating RSA Key Pair...##");

		KeyPair keyPair = null;

		try {
			SecureRandom sr = new SecureRandom();
			KeyPairGenerator generator;

			generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(2048, sr);

			keyPair = generator.generateKeyPair();

		} catch (Exception e) {
			e.printStackTrace();
		}

		return keyPair;
	}

	public static byte[] Decrypt_RSA(byte[] encrypted, PrivateKey privateKey) {
		
		byte[] decrypted_RSA = null;
		
		try {
			
			Cipher cipher = Cipher.getInstance("RSA");
			
			cipher.init(Cipher.DECRYPT_MODE, privateKey);
			decrypted_RSA = cipher.doFinal(encrypted);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return decrypted_RSA;
	}
	
	public static String Decrypt_AES(String ciphertext, SecretKey key)
	{
		String result = null;
		
		try {
		    
		    Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
		    c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv.getBytes("UTF-8")));
		    
		    byte[] decrypted = Base64.getDecoder().decode(ciphertext.getBytes("UTF-8"));
		    result = new String(c.doFinal(decrypted), "UTF-8");
			//result = new String(Base64.getDecoder().decode(ciphertext.getBytes("UTF-8")));
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
}