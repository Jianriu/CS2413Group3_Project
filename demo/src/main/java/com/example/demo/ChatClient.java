package com.example.demo;

import java.io.BufferedReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

public class ChatClient {

	Socket cSocket;
	BufferedReader br;
	PrintWriter writer, out;
	ObjectInputStream inO = null;
	InputStream is = null;
	ObjectOutputStream outO = null;
	OutputStream os = null;

	PublicKey pub_RSA = null;
	SecretKey sKey = null;
	String encoded_pub_RSAKey = null;
	byte[] encrypted_AESkey = null;
	static byte[] encrypted_iv = null;
	static String iv = null;

	volatile boolean flag = false;

	public ChatClient(String userName, String fname) {
		System.out.println("Connecting to server");
		try {
			// create thread.
			InetAddress localAddress = InetAddress.getLocalHost();

			cSocket = new Socket(localAddress, 9000);
			// System.out.println(cSocket.getLocalPort());

			SocketThread st = new SocketThread();
			st.start();

			out = new PrintWriter(cSocket.getOutputStream(), true);

			// System.out.println(userName + " " + fName);
			out.println(userName + " " +fname); // send info for connecting

			System.out.println(userName + " #conncet to the server");

			while (true) {
				if (flag == true) {

					// send encrypted AES key to server
					os = cSocket.getOutputStream();
					outO = new ObjectOutputStream(os);
					outO.writeObject(encrypted_AESkey);
					outO.flush();
					String encryted_AESkey_string = new String(Base64.getEncoder().encode(encrypted_AESkey));
					//System.out.println("[encrypted AES key]");
					//System.out.println(encryted_AESkey_string + "\n");

					// send iv to server
					os = cSocket.getOutputStream();
					outO = new ObjectOutputStream(os);
					outO.writeObject(encrypted_iv);
					outO.flush();
					String encryted_IV_string = new String(Base64.getEncoder().encode(encrypted_iv));
					//System.out.println("[encrypted IV]");
					//System.out.println(encryted_IV_string + "\n");

					break;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void sendMsg(String msg) {
		// System.out.println("check:"+msg);
		out.println(encyptFormat(msg, sKey));
	}

	class SocketThread extends Thread {

		public void run() {
			try {
				// get the key first
				while (true) {
					if (pub_RSA == null) {

						// Get Server's public key
						is = cSocket.getInputStream();
						inO = new ObjectInputStream(is);
						pub_RSA = (PublicKey) inO.readObject();
						encoded_pub_RSAKey = Base64.getEncoder().encodeToString(pub_RSA.getEncoded());

						// Print RSA Public Key
						//System.out.println("[RSA PublicKey info Received from Server]");
						//System.out.println(encoded_pub_RSAKey + "\n");

					} else {
						// Encrypt the AES key with Server's public key
						sKey = generate_AES_key();
						encrypted_AESkey = Encrypt_RSA(sKey.getEncoded(), pub_RSA);
						String encodedsKey = Base64.getEncoder().encodeToString(sKey.getEncoded());

						// set iv and encrypt
						iv = "6548979875624486";
						encrypted_iv = Encrypt_RSA(iv.getBytes("UTF-8"), pub_RSA);

						flag = true;

						// Print AES SecretKey & IV generated by Client
						//System.out.println("[IV info by Client]");
						//System.out.println(iv + "\n");
						//System.out.println("[AES SecretKey info generated by Client]");
						//System.out.println(encodedsKey + "\n");

						break;
					}
				}
				// chatController.setMsg(null);
			} catch (Exception e) {
			}
		}

	}

	public static String encyptFormat(String msg, SecretKey k){

        Long timeStamp = System.currentTimeMillis(); 
		SimpleDateFormat sdf=new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss]");
		String sd = sdf.format(new Date(Long.parseLong(String.valueOf(timeStamp)))); 
		
        String send = "\"" + msg +"\"" + " " + sd;

		//System.out.println(msg + " -> " + send);
					
		//Encrypt with AES256
		String send_encrypt = Encrypt_AES(send, k);

        return send_encrypt;
    }

    public static SecretKey generate_AES_key() {
		
		//System.out.println("##Creating AES 256 Secret Key...##");
		
		SecretKey key = null;
		
		try {
			
		    KeyGenerator gen = KeyGenerator.getInstance("AES");
		    gen.init(256);
		    
		    key = gen.generateKey();
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return key; 
	}

    public static byte[] Encrypt_RSA(byte[] plaintext, PublicKey puk) 
	{
		byte[] encryptedSecret = null;
		
		try {
			
			Cipher cipher = Cipher.getInstance("RSA");
		
			cipher.init(Cipher.ENCRYPT_MODE, puk);
			encryptedSecret = cipher.doFinal(plaintext);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return encryptedSecret;
	}

    public static String Encrypt_AES(String plaintext, SecretKey keyv){
		String result = null;
		
		try {
		    
			Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
		    c.init(Cipher.ENCRYPT_MODE, keyv, new IvParameterSpec(iv.getBytes()));
		 
		    byte[] encrypted = c.doFinal(plaintext.getBytes("UTF-8"));
		    result = new String(Base64.getEncoder().encode(encrypted));
		 
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

    public static byte[] Decrypt_RSA(byte[] enc, PrivateKey pr) {
		
		byte[] decrypted_RSA = null;
		
		try {
			
			Cipher cipher = Cipher.getInstance("RSA");
			
			cipher.init(Cipher.DECRYPT_MODE, pr);
			decrypted_RSA = cipher.doFinal(enc);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return decrypted_RSA;
	}

}
